git使用方法
1.安装配置
1.1.在Linux上安装Git
首先，你可以试着输入git，看看系统有没有安装Git：
$ git
The program 'git' is currently not installed. You can install it by typing:
sudo apt-get install git

1.2.在Windows上安装Git
在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。
安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！

1.3.配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ git config user.email
  kzhang2009@163.com
$ git config user.name
  kk
$ git config --list

2.版本库操作
2.1.初始化版本库
$ git init
Initialized empty Git repository in/Users/michael/learngit/.git/ 
2.2.添加文件到版本库
添加文件到Git仓库，分两步：
使用命令git add <file>，注意，可反复多次使用，添加多个文件；//使用 git add <file> 命令将单个文件的更改添加到暂存区，或使用 git add . 命令将所有更改添加到暂存区
使用命令git commit -m <message>，完成。//使用 git commit -m "提交信息" 命令将暂存区中的更改提交到版本库
2.3.查看版本库的状态 //使用 git status 命令可以查看工作区中已修改但尚未暂存的文件。
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   readme.txt
2.4.查看修改内容
    git diff 是一个非常有用的命令，它用来查看Git仓库中的更改。默认情况下，如果没有提供任何参数，它会显示工作目录和暂存区之间的差异，也就是说，它会显示自上次 git add 以来你做了哪些修改但还没有暂存。
    下面是一些常用的 git diff 命令的变体：
    git diff --staged 或 git diff --cached：这两个命令是等价的，都用来查看已经暂存但还未提交的更改。也就是说，它会比较暂存区和最后一次提交之间的差异。
    git diff HEAD：这个命令用来查看工作目录和最后一次提交之间的差异，包括已暂存和未暂存的更改。
    git diff <commit1>..<commit2>：这个命令用来查看两个不同提交之间的差异。
    git diff <branch1>..<branch2>：这个命令用来查看两个不同分支之间的差异。

    这些只是 git diff 命令的一些基本用法，Git提供了许多其他选项和参数来定制 git diff 命令的行为。
    示例：git diff file.txt（比较工作区与版本库的差异）
    示例：git diff --staged file.txt（比较暂存区与版本库的差异）
  
  git diff dev -- README.md
  //这将显示当前工作目录中的 README.md文件 
  //与 dev 分支上的 README.md文件之间的差异。 
  //这个命令会展示两个文件之间添加（绿色）
  //和删除（红色）的行。


$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.

 2.4.1 比较文件在工作目录和暂存区差异
        git diff -- readme.txt
 2.4.2 比较文件在暂存区和版本库差异
        git diff --cached -- readme.txt
        git diff --staged -- readme.txt
 2.4.4 比较文件在工作目录和版本库差异
        git diff HEAD -- readme.txt
 2.4.5 “--”
          在 Git 命令中，-- 被用作一个 "end of options" 标记。这意味着 -- 之后的所有内容都将被视为参数，而不是选项。这在某些情况下非常有用，特别是当参数可能以 - 开头（这通常是选项的标志）时。
          例如，假设你有一个名为 -my-file.txt 的文件，并且你想使用 git add 命令来添加它。如果你只是运行 git add -my-file.txt，Git 会将 -my-file.txt 当作一个选项来解析，这会导致错误。但是，如果你运行 git add -- -my-file.txt，Git 就会正确地将 -my-file.txt 视为一个参数，即一个文件名。
          另一个常见的使用场景是在对比两个分支时，如果你有一个名为 "master" 的文件，并且你想对比 "master" 分支和这个文件的差异，你可以使用 git diff master -- master 命令。在这个命令中，第一个 "master" 是分支名，而 -- 之后的 "master" 是文件名。
          总的来说，-- 在 Git 命令中的作用是帮助区分选项和参数，避免命令行解析的混淆和错误。

2.5 撤销修改 
  要撤销工作区中的更改，您可以使用 git restore <file>。
  要从暂存区中撤销更改，您可以使用 git restore --staged <file>。
  要同时撤销工作区和暂存区中的更改，您可以使用 git restore --source=HEAD --staged --worktree <file>。
  场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。//老版本命令
  场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。//老版本命令
  场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

2.6 查看版本库提交历史
2.6.1 默认的 git log：
      直接运行 git log 命令，将显示版本库中提交的列表，按照从最新到最旧的顺序排列。每个提交都显示其哈希值、作者、提交日期和提交信息。
      示例：git log

      --graph

2.6.2 在一行中显示提交信息：
      使用 git log --oneline 命令可以将每个提交的信息压缩到一行中，显示较短的哈希值和提交信息。
      示例：git log --oneline

2.6.3 显示提交中的更改：
      使用 git log -p 或 git log --patch 命令可以查看每个提交中的差异（即每次提交所做的更改）。
      示例：git log -p

2.6.4 限制显示的提交数量：
      使用 git log -n 命令可以限制显示的提交数量，其中 n 是您要显示的提交数。例如，git log -3 将仅显示最近的三个提交。
      示例：git log -3

2.6.5 搜索特定作者的提交：
      使用 git log --author="作者名称" 命令可以搜索特定作者的提交。
      示例：git log --author="John Doe"

2.6.6 根据提交信息搜索提交：
      使用 git log --grep="搜索词" 命令可以根据提交信息中的关键词搜索提交。
      示例：git log --grep="bug fix"

2.6.7 显示特定时间范围内的提交：
      使用 git log --since="时间" 和 git log --until="时间" 命令可以查看特定时间范围内的提交。时间可以是日期（例如 "2021-01-01"）或相对时间（例如 "2 weeks ago"）。
      示例：git log --since="2021-01-01"
      示例：git log --since="2 weeks ago" --until="3 days ago"

2.6.8 显示特定文件或目录的提交历史：
      您还可以使用 git log 命令查看特定文件或目录的提交历史。只需在 git log 命令后添加文件或目录的路径。
      示例：git log path/to/file.txt
      示例：git log path/to/directory
3 版本管理
3.1 版本回退
3.1.1 使用 git reset：
      git reset 命令可以将项目回退到指定的提交。它有三种模式：--soft、--mixed（默认）和 --hard。
      git reset --soft <commit>：将 HEAD 指针（当前分支）移动到指定提交，保留工作区和暂存区的更改。这样，您可以重新提交这些更改。
      git reset --mixed <commit>：将 HEAD 指针移动到指定提交，并将更改从暂存区移除，但保留在工作区。这样，您可以重新审查并暂存这些更改。
      git reset --hard <commit>：将 HEAD 指针移动到指定提交，并丢弃工作区和暂存区的所有更改。这将彻底回退到指定提交，丢失所有未提交的更改。
      示例：git reset --hard abc123（将项目回退到哈希值为 abc123 的提交）

3.1.2 使用 git revert：
      git revert 命令可以创建一个新的提交，其更改是指定提交的逆操作。这样，您可以撤销之前的提交而不改变项目的提交历史。
      示例：git revert abc123（撤销哈希值为 abc123 的提交）

3.1.3 使用 git checkout：
      git checkout 命令可以将工作区切换到指定的提交。这将使您的工作区与该提交完全相同，但不会更改当前分支。如果您想在这个状态下创建一个新的分支，可以使用 git checkout -b <new-branch>。
      示例：git checkout abc123（将工作区切换到哈希值为 abc123 的提交）
      示例：git checkout -b new-branch abc123（基于哈希值为 abc123 的提交创建一个新分支）

这些命令可以帮助您在需要时回退到之前的提交。请注意，在使用 git reset 和 git checkout 时要谨慎，因为它们可能导致您丢失未提交的更改。在进行回退操作之前，确保备份您的工作。
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，上100个版本写成HEAD~100。
用git reflog查看命令历史

3.2 删除文件
    git rm会同时删除暂存区和工作区，而其它不会
    3.2.1 如果未add和commit，rm后文件找不回
    3.2.2 如果add后未commit，rm后git restore filename 从暂存区找回文件，
          此时git add 是将暂存区也删除，再找不回了
    3.2.3 如果add后commit，rm后git restore --staged filename 从分支找回到暂存区，
          git restore filename 从暂存区找回到工作区 

3.3 Git 的四种基本对象之一，包括：  
    Blob 对象：存储文件内容。
    Tree 对象：存储目录结构信息，包括文件名、文件模式（权限）和指向文件内容的 blob 对象哈希值。
    Commit 对象：存储有关特定提交的信息，包括作者、提交者、提交时间、提交消息和指向根目录 tree 对象的哈希值。
    Tag 对象：用于给特定的 commit 对象打标签，通常用于发布软件版本。
    Git 使用这些对象来构建存储库的历史记录。
    当您查看文件的不同版本时，Git 会通过 blob 对象哈希值来检索对应的文件内容。
    git ls-tree -r HEAD
    //这将显示当前分支 HEAD 提交中的所有文件及其对应的 blob 对象哈希值
4 远程仓库
  4.1 创建SSH Key 
      ssh-keygen -t rsa -C "youremail@example.com"
  4.2 Add SSH Key
  4.3 sign in github
  4.4 new repository
  4.5 本地关联远程
      git branch -M master
      //这个命令用于重命名当前仓库的主分支
      //命令的选项“-M”表示强制重命名分支，
      //即使新分支名称已经存在或者
      //当前分支与新名称不同步。
      //这与“-m”选项不同，后者只会重命名分支，
      //如果新名称不存在，并且不会覆盖任何已经存在的分支。
      git remote add origin git@github.com:yourgithub/repo.git
      //关联一个远程库时必须给远程库指定一个名字，
      //origin是默认习惯命名；

      git branch --set-upstream branch-name origin/branch-name
      命令用于设置本地分支与远程分支的对应关系。
      这将会使得一些操作（如 git pull, git push）在默认情况下知道应该与哪个远程分支进行交互。
      --set-upstream 是一个已经被废弃的选项。
      在新版的 Git 中，推荐使用 --set-upstream-to 或者 -u 选项。
      所以你的命令应该写作：
      git branch --set-upstream-to=origin/branch-name branch-name
      git branch -u origin/branch-name branch-name

  4.6 本地库的所有内容推送到远程库上
      git push -u origin master
      //由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
      //Git不但会把本地的master分支内容推送的远程新的master分支，
      //还会把本地的master分支和远程的master分支关联起来，
      //在以后的推送或者拉取时就可以简化命令,
      //git push origin master推送最新修改
      //git push origin master:dev 将本地的master 推送到远程dev分支

      git push -u origin master：
      //这个命令的主要目的是将本地的更改推送到远程仓库，
      //并在推送的同时设置当前本地分支的上游分支。
      //这个命令常常用在你已经在本地做了一些更改，
      //并想要将这些更改推送到远程仓库的情况下。
      git branch -u origin/branch-name branch-name：
      //这个命令的主要目的是设置本地分支的上游分支，而不涉及任何的推送操作。
      //这个命令常常用在你想要改变某个本地分支对应的远程上游分支的情况下。
      在 git push -u origin master 命令中，"master" 就是分支名。
      //这个命令的含义是推送本地的 "master" 分支到名为 "origin" 的远程仓库，
      //并且使用 "-u" 选项来设置远程仓库的 "master" 分支为本地 "master" 分支的上游分支。
      //一般来说，Git 命令的语法是 git push <远程名> <本地分支>:<远程分支>。
      //如果本地分支名和远程分支名相同，那么可以省略冒号和远程分支名，
      //即 git push <远程名> <分支名>，这就是 git push origin master 的来源。
      //而 "-u" 选项是 "--set-upstream" 的简写，用于设置推送关系。
      //使用这个选项后，以后就可以直接使用 git push 和 git pull 命令进行推送和拉取操作，而无需再指定远程仓库和分支名。
  4.7 远程库克隆
      git clone git@github.com:yourgithub/repo.git
      //随便找个目录克隆远程库的内容，
      //不要和本地库在一个目录，
      //免得本地库被覆盖
      //在执行 git clone 命令之前，
      //需要先添加 SSH 密钥到您的 GitHub 或 GitLab 账户，
      //以便您可以使用 SSH 协议从远程仓库中克隆代码库。
      //不需要将您的 SSH 密钥添加到开源项目所有者的 GitHub 账户中。
      //SSH 密钥是用来进行身份验证和授权的，只有您自己才需要拥有您的 SSH 密钥。
      //开源项目所有者不需要您的 SSH 密钥才能让您克隆他们的代码库。
      //当您使用 SSH 协议从开源项目中克隆代码时，
      //Git 会自动使用您本地计算机中保存的 SSH 密钥进行身份验证。
      //这意味着，只要您的 SSH 密钥已经添加到您的 GitHub 账户中，
      //您就可以从任何 GitHub 上的项目中克隆代码了，
      //而无需每次都重新输入用户名和密码。
      //但是，如果您想要向开源项目提交代码，
      //您可能需要将您的公钥添加到您的 GitHub 账户中，
      //以便项目所有者可以向您的公钥授权。
      //这样，当您尝试推送代码到开源项目的 Git 仓库时，
      //Git 会使用您的 SSH 密钥进行身份验证，
      //并通过公钥授权来验证您是否有权限进行更改。
5 分支管理
5.1 合并与创建分支
  Git鼓励大量使用分支：
  查看分支：git branch
  创建分支：git branch <name>
  切换分支：git checkout <name>或者git switch <name>
  创建+切换分支：git checkout -b <name>或者git switch -c <name>
  合并某分支到当前分支：git merge <name>
  删除分支：git branch -d <name>

  git log 显示信息解释：
  (HEAD -> master, dev) 表示当前所在分支为 master 分支，
  并且同时也在 dev 分支上进行了一些操作。
  其中，HEAD 指向当前所在分支的最新提交，
  即 master 分支的最新提交，而dev 表示还有一个分支 dev 存在，并且也有一些操作。
  这种情况通常发生在您在 master 分支上进行了一些操作之后，
  切换到 dev 分支上继续进行操作，然后又切换回 master 分支上。
  在这种情况下，Git 会同时显示这两个分支的信息，
  以便您了解当前所在的分支以及其他分支上的操作状态。
  需要注意的是，同时在多个分支上进行操作可能会导致冲突和错误，
  因此建议您在每个分支上都保持干净的状态，
  并确保在切换分支之前提交所有必要的更改。

  82f646 (HEAD -> master, origin/master, dev) secondly remove test.txt
  这是一个 Git 中的提交信息，包含了以下内容：
  f82f646: 提交的哈希值，用于唯一标识这个提交。
  (HEAD -> master, origin/master, dev): 
  提交所在的分支。
  HEAD 表示当前所在的分支为 master 分支，
  origin/master 和 dev 表示这个提交还分别被 origin/master 分支和 dev 分支所引用。
  secondly remove test.txt: 提交的描述信息，用于说明本次提交所做的修改或变更。在这个例子中，本次提交是删除了一个名为 test.txt 的文件。
  这些信息通常由 Git 自动为您生成，您可以使用 git log 命令来查看提交历史和提交信息。
  这些信息可以帮助您了解代码库的演化历史、查找问题和跟踪代码变更。

5.2 解决冲突
    冲突是指两个分支在同一文件的相同位置进行了不同的更改，
    Git 无法自动解决这些差异。
    当Git无法自动合并分支时，就必须首先解决冲突。
    解决冲突后，再提交，合并完成。
    解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
    用git log --graph命令可以看到分支合并图。

5.3 分支策略
    分支策略
  在实际开发中，我们应该按照几个基本原则进行分支管理：
  首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
  干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
  你和你的小伙伴们每个人都在dev分支上干活，
  每个人都有自己的分支，时不时地往dev分支上合并就可以了。
    git merge --no-ff -m "merge with no-ff" dev  
    //Git会用Fast forward模式，但这种模式下，
    //删除分支后，会丢掉分支信息。  
    //如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，
    //这样，从分支历史上就可以看出分支信息。
    //Git分支十分强大，在团队开发中应该充分应用。
    //合并分支时，加上--no-ff参数就可以用普通模式合并，
    //合并后的历史有分支，能看出来曾经做过合并，
    //而fast forward合并就看不出来曾经做过合并。
5.4 bug分支
    5.4.1 保存分支dev现场 git stash
    //git stash save "your descriptive message"
    5.4.2 切换到急需修复bug的分支
    5.4.3 从待修复分支新建bug分支issue-101
    5.4.4 修复完成，测试通过。切换到待修复分支
    5.4.5 将issue-101分支合并到待修复分支
    //git merge --no-ff -m "merged bug fix 101" issue-101
    5.4.6 切换到dev分支
    5.4.7 恢复现场
    //查看保存列表git stash list
    //恢复并删除最近git stash pop
    //应用最近更改而不删除git stash apply
    //若要删除最近储藏git stash drop 

    //若要应用特定的储藏而不删除git stash apply stash@{n}
    //若要删除一个特定的储藏git stash drop stash@{n}
    5.4.8 将之前修复的bug在当前分支也修复
  //git cherry-pick 123456abcdef将特定的提交从一个分支复制到另一个分支
  //请注意，在执行 git cherry-pick 时，可能会遇到合并冲突
  //在这种情况下，您需要手动解决冲突，然后继续执行 
  //git cherry-pick --continue
  //取消 cherry-pick操作
  //git cherry-pick --abort
  //多个提交，可以使用git cherry-pick commit1 commit2 commit3
  //过指定范围来应用一系列提交
  //git cherry-pick commit1^..commit3
  //不包括commit1^，包括commit1和commit3
  //commit1^是commit1的直接父提交
  //这个是各个提交的时间范围而不是hash值的范围
5.5 feature分支
  开发一个新feature，最好新建一个分支；
  如果要丢弃一个没有被合并过的分支，
  可以通过git branch -D <name>强行删除。
5.6 协同工作
  并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
  master分支是主分支，因此要时刻与远程同步；
  dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
  bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
  feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
  总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！


git switch -c dev origin/dev命令。
//这个命令的作用是创建一个新的名为dev的分支，
//并将其设置为跟踪远程origin/dev分支。
//然后，它会自动切换到新创建的dev分支。
//解释一下各部分的含义：
//git switch：这是一个Git命令，用于切换当前工作分支。
//-c：这是git switch命令的一个选项，用于创建一个新的分支。如果这个分支已经存在，命令会失败。
//dev：这是你要创建的新分支的名字。
//origin/dev：这是你想要新分支跟踪的远程分支。新创建的分支dev会自动设置为跟踪origin/dev。
//这个命令是一个快捷方式，相当于以下2个命令的组合：
git branch dev origin/dev  # 创建新分支并设置跟踪
git checkout dev  # 切换到新分支
//需要注意的是，这个命令需要你已经通过git fetch或者git pull获取了origin/dev分支的最新状态。
//如果你没有，你可能需要先运行git fetch origin。
//我们说的 "跟踪" 分支，是指本地分支跟踪远程分支。
//Git 能够知道这两个分支间的对应关系.
//从而使一些命令（如 git pull 或 git push）更加方便.
git rev-parse --abbrev-ref --symbolic-full-name @{u}
//这个命令将返回当前分支的上游分支。
//如果当前分支没有设置上游分支，
//这个命令将返回错误。
git branch -vv
//此命令将显示本地分支及其对应的远程分支。
//如果当前分支有一个跟踪分支，
//那么该信息将显示在方括号中。


因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，
则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

最常用的 git rebase 语法是 git rebase <base>，
其中 <base> 是你想要你的提交应用到的基底。
例如，如果你想要将你的提交应用到主分支（master）上，
你可以运行 git rebase master



6 标签管理
  6.1 标签创建
  git tag <tagname>用于新建一个标签，
  //默认为HEAD，也可以指定一个commit id；
  git tag -a <tagname> -m "blablabla..."可以指定标签信息；
  git tag可以查看所有标签
  git show <tagname>查看标签信息
  6.2 标签操作
  git tag -d <tagname>删除本地标签；
  git push origin <tagname>推送本地标签；
  git push origin --tags推送全部未推送过的本地标签；
  git push origin :refs/tags/<tagname>删除远程标签，

  git remote add gitee git@gitee.com:liaoxuefeng/learngit.git
  git remote add github git@github.com:michaelliao/learngit.git
  git remote rm gitee
  git remote remove github
7 自定义Git
  7.1 配置颜色：git config --global color.ui true
  7.2 忽略文件：不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
  所有配置文件可以直接在线浏览：https://github.com/github/gitignore 
  忽略文件的原则是：
  7.2.1  忽略操作系统自动生成的文件，比如缩略图等；
  7.2.2  忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
  7.2.3  忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
  # Windows:
  Thumbs.db
  ehthumbs.db
  Desktop.ini

  # Python:
  *.py[cod]
  *.so
  *.egg
  *.egg-info
  dist
  build

  # My configurations:
  db.ini
  deploy_key_rsa

  7.3 git add -f App.class
    有些时候，你想添加一个文件到Git，但发现添加不了，
    原因是这个文件被.gitignore忽略了：
    如果你确实想添加该文件，可以用-f强制添加到Git：
  7.4 git check-ignore -v App.class
      或者你发现，可能是.gitignore写得有问题，
      需要找出来到底哪个规则写错了，
      可以用git check-ignore命令检查：
      git check-ignore -v App.class
      .gitignore:3:*.class	App.class
      Git会告诉我们，.gitignore的第3行规则忽略了该文件，
      于是我们就可以知道应该修订哪个规则
    7.5 例外规则
      # 排除所有.开头的隐藏文件:
      .*
      # 排除所有.class文件:
      *.class

      # 不排除.gitignore和App.class:
      !.gitignore
      !App.class

把指定文件排除在.gitignore规则外的写法就是
!+文件名，所以，只需把例外文件添加进去即可。
可以通过https://gitignore.itranswarp.com在线生成.gitignore文件。

忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

7.6 配置别名
7.6.1 单个参数的别名
  git config --global alias.st status
  //敲git st就表示git status
  当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
  $ git config --global alias.co checkout
  $ git config --global alias.ci commit
  $ git config --global alias.br branch
  //--global参数是全局参数，也就是这些命令在
  //这台电脑的所有Git仓库下都有用。

7.6.2  多个参数的别名：
  git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。
  既然是一个unstage操作，就可以配置一个unstage别名
  git config --global alias.unstage 'reset HEAD'
  git unstage test.py实际上Git执行的是：
  git reset HEAD test.py

  git config --global alias.last 'log -1'
  这样，用git last就能显示最近一次的提交：

  丧心病狂地把lg配置成了
  git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

7.6.3 配置文件
    配置Git的时候，加上--global是针对当前用户起作用的，
    如果不加，那只针对当前的仓库起作用。
    配置文件放哪了？每个仓库的Git配置文件都放在
    .git/config文件中
    $ cat .git/config 
      [core]
          repositoryformatversion = 0
          filemode = true
          bare = false
          logallrefupdates = true
          ignorecase = true
          precomposeunicode = true
      [remote "origin"]
          url = git@github.com:michaelliao/learngit.git
          fetch = +refs/heads/*:refs/remotes/origin/*
      [branch "master"]
          remote = origin
          merge = refs/heads/master
      [alias]
          last = log -1

      别名就在[alias]后面，要删除别名，
      直接把对应的行删掉即可。

而当前用户的Git配置文件放在用户主目录下的
一个隐藏文件.gitconfig中：
    $ cat .gitconfig
    [alias]
        co = checkout
        ci = commit
        br = branch
        st = status
    [user]
        name = Your Name
        email = your@email.com
配置别名也可以直接修改这个文件，如果改错了，
可以删掉文件重新通过命令配置。

给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。

8 搭建Git服务器
在远程仓库一节中，我们讲了远程仓库实际上和
本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改
搭建Git服务器需要准备一台运行Linux的机器，
强烈推荐用Ubuntu或Debian，
这样，通过几条简单的apt命令就可以完成安装
假设你已经有sudo权限的用户账号，
下面，  正式开始安装。
8.1 搭建过程
第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，
就是他们自己的id_rsa.pub文件，把所有公钥导入到
/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，
在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，
因为服务器上的Git仓库纯粹是为了共享，
所以不让用户直接登录到服务器上去改工作区，
并且服务器上的Git仓库通常都以.git结尾。
然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，
这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，
但无法登录shell，因为我们为git用户指定的
git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，
在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

8.2 管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的
/home/git/.ssh/authorized_keys文件里就是可行的。
如果团队有几百号人，就没法这么玩了，
这时，可以用Gitosis来管理公钥
8.3 管理权限
有很多不但视源代码如生命，
而且视员工为窃贼的公司，
会在版本控制系统里设置一套完善的权限控制，
每个人是否有读写权限会精确到每个分支甚至每个目录下。
因为Git是为Linux源代码托管而开发的，
所以Git也继承了开源社区的精神，不支持权限控制。
不过，因为Git支持钩子（hook），所以，
可以在服务器端编写一系列脚本来控制提交等操作，
达到权限控制的目的。Gitolite就是这个工具。

8.4 小结
搭建Git服务器非常简单，通常10分钟即可完成；
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。